# Simple Production Docker Compose without Nginx
# This focuses on getting the core application running with external database
version: '3.8'

services:
  # PostgreSQL Database
  pm-app-db:
    image: postgres:16-alpine
    container_name: pm-app-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pmapp
      POSTGRES_USER: pmapp_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_this_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pm-app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pmapp_user -d pmapp"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis Cache
  pm-app-redis:
    image: redis:7-alpine
    container_name: pm-app-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-change_this_password}
    volumes:
      - redis_data:/data
    networks:
      - pm-app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main application
  pm-app:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: pm-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - DATABASE_URL=postgresql://pmapp_user:${DB_PASSWORD:-change_this_password}@pm-app-db:5432/pmapp
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_this_password}@pm-app-redis:6379
      - NEXTAUTH_URL=${APP_URL:-http://localhost:3000}
    env_file:
      - .env.production
    volumes:
      - pm-app-logs:/app/logs
      - pm-app-uploads:/app/uploads
    networks:
      - pm-app-network
    depends_on:
      pm-app-db:
        condition: service_healthy
      pm-app-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pm-app-logs:
    driver: local
  pm-app-uploads:
    driver: local

# Custom network for service isolation
networks:
  pm-app-network:
    driver: bridge
