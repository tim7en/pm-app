# Docker Compose for PM-App Production
version: '3.8'

services:
  # Main application
  pm-app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: pm-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Override specific environment variables
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - DATABASE_URL=file:./data/production.db
      - NEXTAUTH_URL=http://localhost:3000
    env_file:
      # Load environment variables from file
      - .env.docker
    volumes:
      # Persistent data volumes (recommended for production)
      - pm-app-data:/app/data
      - pm-app-logs:/app/logs
      - pm-app-uploads:/app/uploads
      # Alternative: bind mounts for easier access
      # - ./docker-data:/app/data
      # - ./docker-logs:/app/logs
      # - ./docker-uploads:/app/uploads
    networks:
      - pm-app-network
    depends_on:
      - nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    # Security: run as non-root
    user: "1001:1001"
    # Security: read-only root filesystem (except mounted volumes)
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/.next/cache:noexec,nosuid,size=200m

  # Nginx reverse proxy (production-ready)
  nginx:
    image: nginx:1.25-alpine
    container_name: pm-app-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    networks:
      - pm-app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Security: run as non-root
    user: "101:101"
    depends_on:
      - pm-app

  # Database backup service (production recommended)
  db-backup:
    image: alpine:3.18
    container_name: pm-app-backup
    restart: unless-stopped
    volumes:
      - pm-app-data:/data:ro
      - ./backups:/backups
    environment:
      - BACKUP_RETENTION_DAYS=30
    command: >
      sh -c "
        echo 'Database backup service started'
        while true; do
          echo 'Creating database backup at $$(date)'
          if [ -f /data/production.db ]; then
            cp /data/production.db /backups/backup-$$(date +%Y%m%d_%H%M%S).db
            echo 'Backup created successfully'
            # Clean old backups (older than retention period)
            find /backups -name 'backup-*.db' -mtime +$${BACKUP_RETENTION_DAYS:-30} -delete
            echo 'Old backups cleaned up'
          else
            echo 'No database found, skipping backup'
          fi
          sleep 86400  # Run daily
        done
      "
    depends_on:
      - pm-app
    networks:
      - pm-app-network

# Named volumes for data persistence (recommended for production)
volumes:
  pm-app-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker-volumes/data
  pm-app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker-volumes/logs
  pm-app-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker-volumes/uploads
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local

# Custom network for service isolation
networks:
  pm-app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
