# Simple Production Dockerfile for PM-App
# Single-stage build to reduce memory usage

FROM node:20-alpine

# Install runtime dependencies and security updates
RUN apk upgrade --no-cache && \
    apk add --no-cache \
    libc6-compat \
    cairo \
    jpeg \
    pango \
    giflib \
    librsvg \
    pixman \
    python3 \
    make \
    g++ \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    giflib-dev \
    librsvg-dev \
    pixman-dev \
    curl \
    tini

# Create nextjs user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs --ingroup nodejs

# Set working directory
WORKDIR /app

# Create necessary directories
RUN mkdir -p data logs uploads .next/cache && \
    chown -R nextjs:nodejs /app

# Copy package files and install dependencies
COPY package*.json ./
RUN npm install --legacy-peer-deps && \
    npm cache clean --force

# Copy configuration files
COPY next.config.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.mjs ./
COPY tsconfig.json ./
COPY components.json ./

# Copy Prisma and generate client
COPY prisma ./prisma/
RUN npx prisma generate

# Copy source code
COPY src ./src
COPY public ./public
COPY server.ts ./

# Build the application with increased memory
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max-old-space-size=4096"
RUN npm run build

# Remove dev dependencies to save space
RUN npm prune --production

# Switch to non-root user
USER nextjs

# Set runtime environment variables
ENV PORT=3000
ENV HOSTNAME=0.0.0.0

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Use tini for signal handling
ENTRYPOINT ["tini", "--"]
CMD ["node", "server.js"]
