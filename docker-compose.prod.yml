# Production Docker Compose Override
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
version: '3.8'

services:
  pm-app:
    # Production-specific configurations
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://pm_user:pm_pass@postgres:5432/pm_app_prod
      - NEXTAUTH_URL=https://your-domain.com
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
  # PostgreSQL for production (instead of SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: pm-app-postgres
    restart: always
    environment:
      - POSTGRES_DB=pm_app_prod
      - POSTGRES_USER=pm_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - pm-app-network
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pm_user -d pm_app_prod"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: pm-app-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - pm-app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
