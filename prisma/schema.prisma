// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  avatar    String?
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects         Project[]                     @relation("ProjectOwner")
  projectMembers        ProjectMember[]
  workspaceMembers      WorkspaceMember[]
  assignedTasks         Task[]                        @relation("TaskAssignee")
  createdTasks          Task[]                        @relation("TaskCreator")
  verifiedTasks         Task[]                        @relation("TaskVerifier")
  comments              Comment[]
  notifications         Notification[]
  integrations          Integration[]
  sentInvitations       WorkspaceInvitation[]
  uploadedFiles         TaskAttachment[]
  conversationParticipant ConversationParticipant[]
  sentMessages          Message[]

  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects    Project[]
  members     WorkspaceMember[]
  invitations WorkspaceInvitation[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  role        Role     @default(MEMBER)
  joinedAt    DateTime @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  color       String?       @default("#3b82f6")
  status      ProjectStatus @default(PLANNING)
  ownerId     String
  workspaceId String
  startDate   DateTime?
  dueDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  owner     User              @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  workspace Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members   ProjectMember[]
  tasks     Task[]
  sections  Section[]
  timeline  ProjectTimeline[]

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  userId    String
  projectId String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Section {
  id        String   @id @default(cuid())
  name      String
  projectId String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@map("sections")
}

model Task {
  id                 String                 @id @default(cuid())
  title              String
  description        String?
  status             TaskStatus             @default(TODO)
  priority           Priority               @default(MEDIUM)
  dueDate            DateTime?
  assigneeId         String?
  creatorId          String
  projectId          String
  sectionId          String?
  position           Int                    @default(0)
  completedAt        DateTime?
  verificationStatus TaskVerificationStatus @default(PENDING)
  verifiedById       String?
  verifiedAt         DateTime?
  rejectionReason    String?
  estimatedHours     Float?
  actualHours        Float?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt

  // Relations
  assignee     User?            @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creator      User             @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  verifiedBy   User?            @relation("TaskVerifier", fields: [verifiedById], references: [id], onDelete: SetNull)
  project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  section      Section?         @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  comments     Comment[]
  subtasks     SubTask[]
  tags         TaskTag[]
  dependencies TaskDependency[] @relation("DependentTask")
  dependsOn    TaskDependency[] @relation("PrecedingTask")
  attachments  TaskAttachment[]

  @@map("tasks")
}

model SubTask {
  id          String   @id @default(cuid())
  title       String
  isCompleted Boolean  @default(false)
  taskId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model TaskTag {
  id     String @id @default(cuid())
  name   String
  taskId String
  color  String @default("#6b7280")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, name])
  @@map("task_tags")
}

model TaskDependency {
  id              String   @id @default(cuid())
  precedingTaskId String
  dependentTaskId String
  createdAt       DateTime @default(now())

  // Relations
  precedingTask Task @relation("PrecedingTask", fields: [precedingTaskId], references: [id], onDelete: Cascade)
  dependentTask Task @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)

  @@unique([precedingTaskId, dependentTaskId])
  @@map("task_dependencies")
}

model TaskAttachment {
  id        String   @id @default(cuid())
  fileName  String
  filePath  String
  fileSize  Int
  mimeType  String
  taskId    String
  uploadedBy String
  createdAt DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

model ProjectTimeline {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  color       String   @default("#3b82f6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_timeline")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  userId    String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ActivityLog {
  id        String   @id @default(cuid())
  type      String
  message   String
  userId    String
  userName  String
  userAvatar String?
  clearedAt DateTime @default(now())
  originalTimestamp DateTime

  @@map("activity_logs")
}

model WorkspaceInvitation {
  id          String           @id @default(cuid())
  email       String
  workspaceId String
  role        Role             @default(MEMBER)
  invitedBy   String
  status      InvitationStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  expiresAt   DateTime

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  inviter   User      @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([email, workspaceId])
  @@map("workspace_invitations")
}

model Integration {
  id        String          @id @default(cuid())
  type      IntegrationType
  config    String // JSON string for configuration
  isActive  Boolean         @default(true)
  userId    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

model Conversation {
  id        String             @id @default(cuid())
  name      String?            // For group conversations
  isGroup   Boolean            @default(false)
  type      ConversationType   @default(INTERNAL)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String   @id @default(cuid())
  content        String
  conversationId String
  senderId       String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Enums
enum Role {
  OWNER
  ADMIN
  PROJECT_MANAGER
  PROJECT_OFFICER
  MEMBER
  GUEST
}

enum ProjectRole {
  ADMIN
  MANAGER
  OFFICER
  MEMBER
  VIEWER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  AWAITING_VERIFICATION
  VERIFIED
  DONE
  REJECTED
}

enum TaskVerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_DUE_SOON
  TASK_VERIFICATION_REQUIRED
  TASK_VERIFIED
  TASK_REJECTED
  COMMENT_ADDED
  PROJECT_INVITE
  WORKSPACE_INVITE
  WORKSPACE_REMOVED
  ROLE_CHANGE
  DEADLINE_APPROACHING
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum IntegrationType {
  TELEGRAM
  WHATSAPP
}

enum ConversationType {
  INTERNAL
  EXTERNAL
}
